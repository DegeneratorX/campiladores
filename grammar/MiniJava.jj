/**
 * Arquivo de Especificação JavaCC para MiniJava (Completo com Lookaheads para Warnings)
 *
 * Enzo Lozano Abreu - 538196
 * Gutemberg dos Santos Andrade - 493938
 * João Lucas Rodrigues da Silva - 536997
 * Victor Medeiros Martins - 401339
 */

options {
  STATIC = false;
  LOOKAHEAD = 1; // Mantemos global 1, usando lookaheads específicos onde necessário.
  IGNORE_CASE = false;
  DEBUG_PARSER = true;
}

PARSER_BEGIN(MiniJavaParser)

import java.io.*;

public class MiniJavaParser {

  public static void main(String[] args) {
    System.out.println("Analisador MiniJava iniciado.");
    MiniJavaParser parser;
    if (args.length == 0) {
      System.out.println("Lendo da entrada padrão...");
      parser = new MiniJavaParser(System.in);
    } else if (args.length == 1) {
      try {
        System.out.println("Lendo do arquivo: " + args[0]);
        parser = new MiniJavaParser(new FileInputStream(args[0]));
      } catch (FileNotFoundException e) {
        System.err.println("Erro: Arquivo não encontrado: " + args[0]);
        return;
      }
    } else {
      System.err.println("Uso: java MiniJavaParser [arquivo]");
      return;
    }

    try {
      parser.Program();
      System.out.println("\nAnálise sintática concluída com sucesso!");
    } catch (ParseException e) {
      System.err.println("\nErro de Sintaxe:");
      System.err.println(e.getMessage());
      // e.printStackTrace();
    } catch (TokenMgrError e) {
      System.err.println("\nErro Léxico:");
      System.err.println(e.getMessage());
    } catch (Exception e) {
      System.err.println("\nErro inesperado:");
      e.printStackTrace();
    }
  }
}

PARSER_END(MiniJavaParser)

/* Espaços em branco e comentários */
SKIP : {
  " " | "\t" | "\n" | "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

/* Palavras-chave */
TOKEN : {
  < CLASS: "class" > | < PUBLIC: "public" > | < STATIC: "static" > | < VOID: "void" > | < MAIN: "main" > | < STRING: "String" > | < EXTENDS: "extends" > | < RETURN: "return" > | < INT: "int" > | < BOOLEAN: "boolean" > | < IF: "if" > | < ELSE: "else" > | < WHILE: "while" > | < PRINTLN: "System.out.println" > | < LENGTH: "length" > | < TRUE: "true" > | < FALSE: "false" > | < THIS: "this" > | < NEW: "new" >
}

/* Símbolos */
TOKEN : {
  < LPAREN: "(" > | < RPAREN: ")" > | < LBRACE: "{" > | < RBRACE: "}" > | < LBRACKET: "[" > | < RBRACKET: "]" > | < SEMICOLON: ";" > | < DOT: "." > | < COMMA: "," > | < ASSIGN: "=" > | < LT: "<" > | < PLUS: "+" > | < MINUS: "-" > | < MULTIPLY: "*" > | < AND: "&&" > | < NOT: "!" >
}

/* Literais e Identificadores */
TOKEN : {
  < INTEGER_LITERAL: (<DIGIT>)+ >
| < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT> | "_")* >
| < #LETTER: ["a"-"z", "A"-"Z"] >
| < #DIGIT: ["0"-"9"] >
}

// --------------------
// REGRAS GRAMATICAIS
// --------------------

void Program() : {} { MainClass() ( ClassDeclaration() )* <EOF> }

void MainClass() : {}
{
  <CLASS> <IDENTIFIER> <LBRACE>
  <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN> <STRING> <LBRACKET> <RBRACKET> <IDENTIFIER> <RPAREN>
  <LBRACE> Statement() <RBRACE>
  <RBRACE>
}

void ClassDeclaration() : {}
{
  <CLASS> <IDENTIFIER> ( <EXTENDS> <IDENTIFIER> )?
  <LBRACE> ( VarDeclaration() )* ( MethodDeclaration() )* <RBRACE>
}

void VarDeclaration() : {} { Type() <IDENTIFIER> <SEMICOLON> }

void MethodDeclaration() : {}
{
  <PUBLIC> Type() <IDENTIFIER> <LPAREN> ( FormalParameterList() )? <RPAREN>
  <LBRACE>
  // Adicionar LOOKAHEAD aqui para distinguir VarDeclaration de Statement
  // Verifique se a sequência Type Identifier ; realmente existe antes de tentar VarDeclaration
  ( LOOKAHEAD( Type() <IDENTIFIER> <SEMICOLON> ) VarDeclaration() )*
  ( Statement() )*            // Só tenta Statement se não for VarDeclaration
  <RETURN> Expression() <SEMICOLON>
  <RBRACE>
}

void FormalParameterList() : {} { FormalParameter() ( <COMMA> FormalParameter() )* }

void FormalParameter() : {} { Type() <IDENTIFIER> }

void Type() : {}
{
  LOOKAHEAD(2) <INT> <LBRACKET> <RBRACKET>
| <BOOLEAN>
| <INT>
| <IDENTIFIER>
}

void Statement() : {}
{
  <LBRACE> ( Statement() )* <RBRACE>
| <IF> <LPAREN> Expression() <RPAREN> Statement() <ELSE> Statement()
| <WHILE> <LPAREN> Expression() <RPAREN> Statement()
| <PRINTLN> <LPAREN> Expression() <RPAREN> <SEMICOLON>
| // Lookahead para distinguir atribuição de array
  LOOKAHEAD( Identifier() <LBRACKET> )
  Identifier() <LBRACKET> Expression() <RBRACKET> <ASSIGN> Expression() <SEMICOLON>
| // Lookahead EXPLÍCITO para atribuição simples
  LOOKAHEAD( Identifier() <ASSIGN> ) // <-- ADICIONE ESTE LOOKAHEAD
  Identifier() <ASSIGN> Expression() <SEMICOLON>
}

// --- Regras de Expressão (LL(1) com precedência) ---

void Expression() : {} { CompareExpression() ( <AND> CompareExpression() )* }

void CompareExpression() : {} { AddExpression() ( <LT> AddExpression() )* }

void AddExpression() : {} { MultiplyExpression() ( ( <PLUS> | <MINUS> ) MultiplyExpression() )* }

void MultiplyExpression() : {} { UnaryExpression() ( <MULTIPLY> UnaryExpression() )* }

void UnaryExpression() : {} { <NOT> UnaryExpression() | PostfixExpression() }

void PostfixExpression() : {}
{
  PrimaryExpression()
  ( // Adicionado LOOKAHEAD(2) para resolver conflito .length vs .Identifier()
    <LBRACKET> Expression() <RBRACKET>
  | LOOKAHEAD(2) // Resolve Warning 2
    <DOT> <LENGTH>
  | <DOT> <IDENTIFIER> <LPAREN> ( ExpressionList() )? <RPAREN>
  )*
}

void PrimaryExpression() : {}
{
  <INTEGER_LITERAL>
| <TRUE>
| <FALSE>
| <IDENTIFIER>
| <THIS>
| <LPAREN> Expression() <RPAREN>
| // Adicionado LOOKAHEAD(2) para resolver conflito new int[] vs new Identifier()
  LOOKAHEAD(2) // Resolve Warning 3
  <NEW> <INT> <LBRACKET> Expression() <RBRACKET>
| <NEW> <IDENTIFIER> <LPAREN> <RPAREN>
}

void ExpressionList() : {} { Expression() ( <COMMA> Expression() )* }

// Regra auxiliar para lookahead em Statement
void Identifier() : {} { <IDENTIFIER> }