/**
 * Arquivo de Especificação JavaCC para MiniJava (Completo com Lookaheads para Warnings)
 */

options {
  STATIC = false;
  LOOKAHEAD = 1; // Mantemos global 1, usando lookaheads específicos onde necessário.
  IGNORE_CASE = false;
  DEBUG_PARSER = true;
}

PARSER_BEGIN(MiniJavaParser)

import java.io.*;
import syntaxtree.*;
import visitor.*;

public class MiniJavaParser {

  public static void main(String[] args) {
    System.out.println("Analisador MiniJava iniciado.");
    MiniJavaParser parser;
    if (args.length == 0) {
      System.out.println("Lendo da entrada padrão...");
      parser = new MiniJavaParser(System.in);
    } else if (args.length == 1) {
      try {
        System.out.println("Lendo do arquivo: " + args[0]);
        parser = new MiniJavaParser(new FileInputStream(args[0]));
      } catch (FileNotFoundException e) {
        System.err.println("Erro: Arquivo não encontrado: " + args[0]);
        return;
      }
    } else {
      System.err.println("Uso: java MiniJavaParser [arquivo]");
      return;
    }

    try {
      parser.Program();
      System.out.println("\nAnálise sintática concluída com sucesso!");
    } catch (ParseException e) {
      System.err.println("\nErro de Sintaxe:");
      System.err.println(e.getMessage());
      // e.printStackTrace();
    } catch (TokenMgrError e) {
      System.err.println("\nErro Léxico:");
      System.err.println(e.getMessage());
    } catch (Exception e) {
      System.err.println("\nErro inesperado:");
      e.printStackTrace();
    }
  }
}

PARSER_END(MiniJavaParser)

/* Espaços em branco e comentários */
SKIP : {
  " " | "\t" | "\n" | "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

/* Palavras-chave */
TOKEN : {
  < CLASS: "class" > | < PUBLIC: "public" > | < STATIC: "static" > | < VOID: "void" > | < MAIN: "main" > | < STRING: "String" > | < EXTENDS: "extends" > | < RETURN: "return" > | < INT: "int" > | < BOOLEAN: "boolean" > | < IF: "if" > | < ELSE: "else" > | < WHILE: "while" > | < PRINTLN: "System.out.println" > | < LENGTH: "length" > | < TRUE: "true" > | < FALSE: "false" > | < THIS: "this" > | < NEW: "new" >
}

/* Símbolos */
TOKEN : {
  < LPAREN: "(" > | < RPAREN: ")" > | < LBRACE: "{" > | < RBRACE: "}" > | < LBRACKET: "[" > | < RBRACKET: "]" > | < SEMICOLON: ";" > | < DOT: "." > | < COMMA: "," > | < ASSIGN: "=" > | < LT: "<" > | < PLUS: "+" > | < MINUS: "-" > | < MULTIPLY: "*" > | < AND: "&&" > | < NOT: "!" >
}

/* Literais e Identificadores */
TOKEN : {
  < INTEGER_LITERAL: (<DIGIT>)+ >
| < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT> | "_")* >
| < #LETTER: ["a"-"z", "A"-"Z"] >
| < #DIGIT: ["0"-"9"] >
}

// --------------------
// REGRAS GRAMATICAIS
// --------------------

Program Program() : {MainClass main; ClassDeclList classList = new ClassDeclList(); ClassDecl cl;}
{ (main=MainClass())
  (cl=ClassDeclaration() { classList.addElement(cl); } )*
  <EOF>
  { return new Program(main, classList); }
}

MainClass MainClass() : { Token classNameToken, mainArgNameToken; Statement mainStatement; Identifier className, mainArgName; }
{
  <CLASS> classNameToken=<IDENTIFIER> <LBRACE>
  <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN> <STRING> <LBRACKET> <RBRACKET> mainArgNameToken=<IDENTIFIER> <RPAREN>
  <LBRACE> mainStatement=Statement() <RBRACE>
  <RBRACE>
  {
    className = new Identifier(classNameToken.image);
    mainArgName = new Identifier(mainArgNameToken.image);
    return new MainClass(className, mainArgName, mainStatement);
  }
}

ClassDecl ClassDeclaration() : { Token classNameToken, superClassToken = null; Identifier className, superClass = null; VarDeclList varList = new VarDeclList(); MethodDeclList methodList = new MethodDeclList(); VarDecl varDecl; MethodDecl methodDecl; }
{
  <CLASS> classNameToken=<IDENTIFIER>
  (
    <EXTENDS> superClassToken=<IDENTIFIER>
  )?
  <LBRACE>
  ( varDecl=VarDeclaration() { varList.addElement(varDecl); } )*
  ( methodDecl=MethodDeclaration() { methodList.addElement(methodDecl); } )*
  <RBRACE>
  {
    className = new Identifier(classNameToken.image);
    if (superClassToken != null) {
      superClass = new Identifier(superClassToken.image);
      return new ClassDeclExtends(className, superClass, varList, methodList);
    } else {
      return new ClassDeclSimple(className, varList, methodList);
    }
  }
}

VarDecl VarDeclaration() : { Type t; Token id; Identifier varId; }
{
  t=Type() id=<IDENTIFIER> <SEMICOLON>
  {
    varId = new Identifier(id.image);
    return new VarDecl(t, varId);
  }
}

MethodDecl MethodDeclaration() : 
{
  Token methodIdToken;
  Type returnType;
  FormalList formalParamList = new FormalList();
  VarDeclList varDeclList = new VarDeclList();
  StatementList statementList = new StatementList();
  Formal formalParam;
  VarDecl varDecl;
  Statement statement;
  Exp returnExp;
  Identifier methodId;
}
{
  <PUBLIC>
  returnType=Type()
  methodIdToken=<IDENTIFIER>
  <LPAREN>
  ( formalParamList=FormalParameterList() )?
  <RPAREN>
  <LBRACE>
  (
    LOOKAHEAD( Type() <IDENTIFIER> <SEMICOLON> )
    varDecl=VarDeclaration() { varDeclList.addElement(varDecl); }
  )*
  (
    statement=Statement() { statementList.addElement(statement); }
  )*
  <RETURN>
  returnExp=Expression()
  <SEMICOLON>
  <RBRACE>
  {
    methodId = new Identifier(methodIdToken.image);
    return new MethodDecl(returnType, methodId, formalParamList, varDeclList, statementList, returnExp);
  }
}

FormalList FormalParameterList() : { FormalList formalList = new FormalList(); Formal formalParam; }
{
  ( formalParam=FormalParameter() { formalList.addElement(formalParam); } )
  ( <COMMA> formalParam=FormalParameter() { formalList.addElement(formalParam); } )*
  { return formalList; }
}

Formal FormalParameter() : { Type t; Token id; Formal formalParam; }
{
  t=Type() id=<IDENTIFIER>
  {
    formalParam = new Formal(t, new Identifier(id.image));
    return formalParam;
  }
}

Type Type() : { Type type; Token id; }
{
  LOOKAHEAD(2) <INT> <LBRACKET> <RBRACKET>
  { type = new IntArrayType(); }
| <BOOLEAN>
  { type = new BooleanType(); }
| <INT>
  { type = new IntegerType(); }
| id=<IDENTIFIER>
  { type = new IdentifierType(id.image); }
  { return type; }
}

Statement Statement() : { Statement s, s1, s2; Exp exp, index, value; Identifier id; StatementList sl = new StatementList(); IdentifierExp idExp; Assign assign; ArrayAssign arrayAssign; }
{
  <LBRACE> ( s=Statement() { sl.addElement(s); } )* <RBRACE> { return new Block(sl); }
| <IF> <LPAREN> exp=Expression() <RPAREN> s1=Statement() <ELSE> s2=Statement() { return new If(exp, s1, s2); }
| <WHILE> <LPAREN> exp=Expression() <RPAREN> s=Statement() { return new While(exp, s); }
| <PRINTLN> <LPAREN> exp=Expression() <RPAREN> <SEMICOLON> { return new Print(exp); }
| // Lookahead para distinguir atribuição de array
  LOOKAHEAD( Identifier() <LBRACKET> )
  id=Identifier() <LBRACKET> index=Expression() <RBRACKET> <ASSIGN> value=Expression() <SEMICOLON>
  {
    arrayAssign = new ArrayAssign(id, index, value);
    return arrayAssign;
  }
| // Lookahead EXPLÍCITO para atribuição simples
  LOOKAHEAD( Identifier() <ASSIGN> ) // <-- ADICIONE ESTE LOOKAHEAD
  id=Identifier() <ASSIGN> value=Expression() <SEMICOLON>
  {
    assign = new Assign(id, value);
    return assign;
  }
}

// --- Regras de Expressão (LL(1) com precedência) ---

Exp Expression() : { Exp left, right; }
{
  left=CompareExpression()
  (
    <AND> right=CompareExpression() { left = new And(left, right); }
  )*
  { return left; }
}

Exp CompareExpression() : { Exp left, right; }
{
  left=AddExpression()
  (
    <LT> right=AddExpression() { left = new LessThan(left, right); }
  )*
  { return left; }
}

Exp AddExpression() : { Exp left, right; Token op; }
{
  left=MultiplyExpression()
  (
    ( op=<PLUS> | op=<MINUS> ) right=MultiplyExpression()
    {
      if (op.kind == PLUS) {
        left = new Plus(left, right);
      } else {
        left = new Minus(left, right);
      }
    }
  )*
  { return left; }
}

Exp MultiplyExpression() : { Exp left, right; }
{
  left=UnaryExpression()
  (
    <MULTIPLY> right=UnaryExpression() { left = new Times(left, right); }
  )*
  { return left; }
}

Exp UnaryExpression() : { Exp unaryExp, postfixExp; }
{
  <NOT> unaryExp=UnaryExpression() {return new Not(unaryExp); }
  | postfixExp=PostfixExpression() { return postfixExp; }
}

Exp PostfixExpression() : {Exp primaryExp, indexExp; Token methodId; ExpList args = null; }
{
  primaryExp=PrimaryExpression()
  (
    <LBRACKET> indexExp=Expression() <RBRACKET>
    { primaryExp = new ArrayLookup(primaryExp, indexExp); }
  | LOOKAHEAD(2)
    <DOT> <LENGTH>
    { primaryExp = new ArrayLength(primaryExp); }
  | <DOT> methodId=<IDENTIFIER> <LPAREN> ( args=ExpressionList() )? <RPAREN>
    { primaryExp = new Call(primaryExp, new Identifier(methodId.image), args != null ? args : new ExpList()); }
  )*
  { return primaryExp; }
}

Exp PrimaryExpression() : { Token intLiteralToken, identifierToken; Exp expr; Identifier identifier; }
{
  intLiteralToken=<INTEGER_LITERAL> { return new IntegerLiteral(Integer.parseInt(intLiteralToken.image)); }
| <TRUE> { return new True(); }
| <FALSE> { return new False(); }
| identifierToken=<IDENTIFIER> { identifier = new Identifier(identifierToken.image); return new IdentifierExp(identifier.toString()); }
| <THIS> { return new This(); }
| <LPAREN> expr=Expression() <RPAREN> { return expr; }
| // Adicionado LOOKAHEAD(2) para resolver conflito new int[] vs new Identifier()
  LOOKAHEAD(2) // Resolve Warning 3
  <NEW> <INT> <LBRACKET> expr=Expression() <RBRACKET> { return new NewArray(expr); }
| <NEW> identifierToken=<IDENTIFIER> <LPAREN> <RPAREN> { identifier = new Identifier(identifierToken.image); return new NewObject(identifier); }
}

ExpList ExpressionList() : { ExpList list = new ExpList(); Exp e; }
{
  ( e=Expression() { list.addElement(e); } )
  ( <COMMA> e=Expression() { list.addElement(e); } )*
  { return list; }
}

// Regra auxiliar para lookahead em Statement
Identifier Identifier() : { Token t; }
{
  t=<IDENTIFIER>
  { return new Identifier(t.image); }
}