/**
 * Arquivo de Especificação JavaCC para MiniJava (Completo com Lookaheads e Documentação)
 *
 * Este arquivo define a gramática da linguagem MiniJava para a ferramenta JavaCC.
 * JavaCC lê este arquivo e gera automaticamente o código Java (.java) de um
 * analisador léxico (que divide o código em "palavras" ou tokens) e um
 * analisador sintático (que verifica se a sequência de tokens forma uma estrutura válida).
 *
 * Enzo 
 */

// --- Seção de Opções ---
// Configurações globais para o parser gerado pelo JavaCC.
options {
  // STATIC = false: Gera métodos não estáticos no parser. Isso facilita
  // criar múltiplas instâncias do parser se necessário, embora para um
  // compilador simples geralmente não seja crucial.
  STATIC = false;

  // LOOKAHEAD = 1: Define o número padrão de tokens que o parser "espia"
  // à frente para decidir qual regra gramatical seguir. Um valor de 1 (LL(1))
  // é comum, mas pode levar a ambiguidades em certas gramáticas.
  // Usaremos lookaheads específicos em regras problemáticas.
  LOOKAHEAD = 1;

  // IGNORE_CASE = false: Diferencia letras maiúsculas de minúsculas.
  // MiniJava é case-sensitive (ex: "minhavar" é diferente de "MinhaVar").
  IGNORE_CASE = false;

  // DEBUG_PARSER = true: Habilita mensagens detalhadas de depuração durante a análise.
  // Mostra quais regras estão sendo chamadas e quais tokens estão sendo consumidos.
  // Muito útil para encontrar erros na gramática ou entender o fluxo.
  // Comente ou mude para 'false' para uma execução normal.
  DEBUG_PARSER = true;
}

// --- Bloco PARSER_BEGIN/END ---
// Código Java que será inserido diretamente na classe do parser gerado (MiniJavaParser.java).
PARSER_BEGIN(MiniJavaParser)

// Importações Java necessárias para o código dentro deste bloco.
import java.io.*;

// A classe Java que será gerada pelo JavaCC.
public class MiniJavaParser {

  // O método principal (main) para executar o analisador.
  // Este método configura o parser para ler da entrada padrão (teclado)
  // ou de um arquivo passado como argumento na linha de comando.
  public static void main(String[] args) {
    System.out.println("Analisador MiniJava iniciado.");
    MiniJavaParser parser; // Declara a variável do parser.

    // Verifica se um nome de arquivo foi fornecido como argumento.
    if (args.length == 0) {
      // Nenhum arquivo fornecido, lê da entrada padrão (System.in).
      System.out.println("Lendo da entrada padrão...");
      parser = new MiniJavaParser(System.in);
    } else if (args.length == 1) {
      // Um nome de arquivo foi fornecido. Tenta abrir e ler dele.
      try {
        System.out.println("Lendo do arquivo: " + args[0]);
        parser = new MiniJavaParser(new FileInputStream(args[0]));
      } catch (FileNotFoundException e) {
        // Erro se o arquivo não for encontrado.
        System.err.println("Erro: Arquivo não encontrado: " + args[0]);
        return; // Termina a execução.
      }
    } else {
      // Número incorreto de argumentos. Mostra como usar.
      System.err.println("Uso: java MiniJavaParser [arquivo]");
      return; // Termina a execução.
    }

    // Tenta iniciar a análise sintática chamando a regra inicial ("Program").
    try {
      // Program() é a primeira regra da gramática a ser analisada.
      // Se esta chamada retornar sem lançar exceção, a sintaxe está correta.
      parser.Program();
      System.out.println("\nAnálise sintática concluída com sucesso!");
    } catch (ParseException e) {
      // Captura erros de sintaxe detectados pelo parser.
      // Ex: Ponto e vírgula faltando, palavra-chave no lugar errado, etc.
      System.err.println("\nErro de Sintaxe:");
      System.err.println(e.getMessage());
      // e.printStackTrace(); // Descomente para ver a pilha de chamadas do erro.
    } catch (TokenMgrError e) {
      // Captura erros léxicos detectados pelo analisador léxico (Token Manager).
      // Ex: Um caractere inválido que não pertence a nenhum token definido.
      System.err.println("\nErro Léxico:");
      System.err.println(e.getMessage());
    } catch (Exception e) {
      // Captura quaisquer outros erros inesperados.
      System.err.println("\nErro inesperado:");
      e.printStackTrace();
    }
  }
}

// Fim do bloco de código Java a ser inserido.
PARSER_END(MiniJavaParser)

// --- Seção de Definições Léxicas (Tokens) ---
// Define as "palavras" e "símbolos" da linguagem MiniJava.
// O Analisador Léxico (Token Manager) usará estas definições para
// dividir o fluxo de caracteres do código fonte em uma sequência de tokens.

/* Ignoráveis (SKIP): Espaços em branco e comentários */
// Define sequências de caracteres que devem ser completamente ignoradas pelo parser.
// Elas servem para formatação e legibilidade humana, mas não têm significado sintático.
SKIP : {
  " "                               /* Espaço simples */
| "\t"                              /* Tabulação */
| "\n"                              /* Nova linha (Line Feed) */
| "\r"                              /* Retorno de carro (Carriage Return) */
// Comentário de linha única: Começa com // e vai até o fim da linha.
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
// Comentário de múltiplas linhas: Começa com /* e termina com */. Não pode ser aninhado facilmente na definição padrão.
| <"/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

/* Tokens: Palavras-chave */
// Define as palavras reservadas da linguagem MiniJava.
// Elas têm um significado fixo e não podem ser usadas como nomes de variáveis ou métodos.
TOKEN : {
  < CLASS: "class" > | < PUBLIC: "public" > | < STATIC: "static" > | < VOID: "void" >
| < MAIN: "main" > | < STRING: "String" > | < EXTENDS: "extends" > | < RETURN: "return" >
| < INT: "int" > | < BOOLEAN: "boolean" > | < IF: "if" > | < ELSE: "else" >
| < WHILE: "while" > | < PRINTLN: "System.out.println" > // Trata como um token único
| < LENGTH: "length" > | < TRUE: "true" > | < FALSE: "false" > | < THIS: "this" >
| < NEW: "new" >
}

/* Tokens: Símbolos */
// Define os caracteres ou sequências curtas que atuam como operadores ou delimitadores.
TOKEN : {
  < LPAREN: "(" >   // Parêntese esquerdo
| < RPAREN: ")" >   // Parêntese direito
| < LBRACE: "{" >   // Chave esquerda
| < RBRACE: "}" >   // Chave direita
| < LBRACKET: "[" > // Colchete esquerdo
| < RBRACKET: "]" > // Colchete direito
| < SEMICOLON: ";" > // Ponto e vírgula
| < DOT: "." >      // Ponto (para acesso a membros/métodos)
| < COMMA: "," >    // Vírgula (para listas de parâmetros/argumentos)
| < ASSIGN: "=" >   // Operador de atribuição
| < LT: "<" >       // Operador "menor que"
| < PLUS: "+" >     // Operador de adição
| < MINUS: "-" >    // Operador de subtração
| < MULTIPLY: "*" > // Operador de multiplicação
| < AND: "&&" >     // Operador "E" lógico
| < NOT: "!" >      // Operador "NÃO" lógico (negação)
}

/* Tokens: Literais e Identificadores */
// Define os padrões para números, nomes dados pelo programador, etc.
TOKEN : {
  // Literal Inteiro: Uma sequência de um ou more dígitos decimais.
  < INTEGER_LITERAL: (<DIGIT>)+ >
  // Identificador: Um nome definido pelo programador (para classes, métodos, variáveis).
  // Deve começar com uma letra, seguida por zero ou mais letras, dígitos ou underscores (_).
| < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT> | "_")* >

  // Definições privadas (#): Não são tokens por si só, mas ajudam a definir outros tokens.
| < #LETTER: ["a"-"z", "A"-"Z"] > // Define o que é uma letra.
| < #DIGIT: ["0"-"9"] >          // Define o que é um dígito.
}

// -----------------------------------------------------
// REGRAS GRAMATICAIS (Produções BNF)
// -----------------------------------------------------
// Define a estrutura sintática da linguagem MiniJava.
// Como os tokens (definidos acima) podem ser combinados para formar
// programas válidos. As regras são escritas em um formato similar ao BNF.
// Cada regra (método void) define um "não-terminal" da gramática.

/**
 * Regra inicial: Program
 * Define a estrutura geral de um programa MiniJava completo.
 * Um programa consiste em uma classe principal (MainClass) seguida por
 * zero ou mais declarações de outras classes (ClassDeclaration), e
 * deve terminar com o fim do arquivo (EOF - End Of File).
 * BNF: Program ::= MainClass ( ClassDeclaration )* <EOF>
 */
void Program() : {} /* Bloco de declaração Java (vazio aqui) */
{ /* Bloco de expansão da regra */
  MainClass()           // Deve começar com a classe principal.
  ( ClassDeclaration() )* // Seguido por zero ou mais (*) outras classes.
  <EOF>                 // Deve terminar com o fim do arquivo.
}

/**
 * Regra: MainClass
 * Define a estrutura exata da classe principal obrigatória em MiniJava.
 * BNF: MainClass ::= "class" Identifier "{" "public" "static" "void" "main"
 *                    "(" "String" "[" "]" Identifier ")" "{" Statement "}" "}"
 */
void MainClass() : {}
{
  <CLASS> <IDENTIFIER> <LBRACE> // "class" NomeDaClasse "{"
  <PUBLIC> <STATIC> <VOID> <MAIN> // "public" "static" "void" "main"
  <LPAREN> <STRING> <LBRACKET> <RBRACKET> <IDENTIFIER> <RPAREN> // "(" "String" "[" "]" nomeArgs ")"
  <LBRACE> // "{"
  Statement() // O corpo do método main deve conter um comando (pode ser um bloco {}).
  <RBRACE> // "}"
  <RBRACE> // "}" (fecha a classe)
}

/**
 * Regra: ClassDeclaration
 * Define a estrutura de classes "normais" (não a principal).
 * BNF: ClassDeclaration ::= "class" Identifier ( "extends" Identifier )?
 *                          "{" ( VarDeclaration )* ( MethodDeclaration )* "}"
 */
void ClassDeclaration() : {}
{
  <CLASS> <IDENTIFIER>             // "class" NomeDaClasse
  ( <EXTENDS> <IDENTIFIER> )?      // Opcionalmente (?) "extends" OutroNome.
  <LBRACE>                         // "{"
  ( VarDeclaration() )*            // Zero ou mais (*) declarações de variáveis de instância.
  ( MethodDeclaration() )*         // Zero ou mais (*) declarações de métodos.
  <RBRACE>                         // "}"
}

/**
 * Regra: VarDeclaration
 * Define como uma variável é declarada (fora ou dentro de um método).
 * BNF: VarDeclaration ::= Type Identifier ";"
 */
void VarDeclaration() : {}
{
  Type() <IDENTIFIER> <SEMICOLON> // Tipo NomeDaVariavel ";"
}

/**
 * Regra: MethodDeclaration
 * Define a estrutura de um método dentro de uma classe.
 * BNF: MethodDeclaration ::= "public" Type Identifier "(" ( FormalParameterList )? ")"
 *                            "{" ( VarDeclaration )* ( Statement )* "return" Expression ";" "}"
 */
void MethodDeclaration() : {}
{
  <PUBLIC> Type() <IDENTIFIER> // "public" TipoDeRetorno NomeDoMetodo
  <LPAREN> ( FormalParameterList() )? <RPAREN> // "(" ListaDeParametrosOpcional ")"
  <LBRACE> // "{" (início do corpo do método)

  // LOOKAHEAD para resolver ambiguidade: VarDeclaration vs Statement.
  // Ambos podem começar com um Identifier (se Type for um nome de classe).
  // Esta predição verifica se a sequência `Type Identifier ;` realmente existe.
  // Se sim, consome uma VarDeclaration. Se não, tenta um Statement.
  ( LOOKAHEAD( Type() <IDENTIFIER> <SEMICOLON> ) VarDeclaration() )*

  ( Statement() )*            // Zero ou mais (*) comandos (instruções).

  <RETURN> Expression() <SEMICOLON> // Obrigatoriamente "return" Expressao ";".
  <RBRACE> // "}" (fim do corpo do método)
}

/**
 * Regra: FormalParameterList
 * Define uma lista de um ou mais parâmetros formais para um método.
 * BNF: FormalParameterList ::= FormalParameter ( "," FormalParameter )*
 */
void FormalParameterList() : {}
{
  FormalParameter() // Pelo menos um parâmetro.
  ( <COMMA> FormalParameter() )* // Seguido por zero ou mais (", " Parâmetro).
}

/**
 * Regra: FormalParameter
 * Define um único parâmetro formal (tipo e nome).
 * BNF: FormalParameter ::= Type Identifier
 */
void FormalParameter() : {}
{
  Type() <IDENTIFIER> // Tipo NomeDoParametro
}

/**
 * Regra: Type
 * Define os tipos de dados válidos em MiniJava.
 * BNF: Type ::= "int" "[" "]" | "boolean" | "int" | Identifier
 */
void Type() : {}
{
  // LOOKAHEAD(2) é necessário para diferenciar "int[]" de "int".
  // Quando o parser vê "int", ele precisa olhar o *próximo* token.
  // Se for "[", é um array; caso contrário, é apenas "int".
  LOOKAHEAD(2) <INT> <LBRACKET> <RBRACKET> // Tipo array de inteiros: "int" "[" "]"
| <BOOLEAN>                   // Tipo booleano: "boolean"
| <INT>                       // Tipo inteiro: "int"
| <IDENTIFIER>                // Tipo objeto: NomeDeOutraClasse
}

/**
 * Regra: Statement
 * Define os diferentes tipos de comandos (instruções) que podem aparecer
 * dentro de um método ou no corpo do main.
 * BNF: Statement ::= "{" ( Statement )* "}"
 *             | "if" "(" Expression ")" Statement "else" Statement
 *             | "while" "(" Expression ")" Statement
 *             | "System.out.println" "(" Expression ")" ";"
 *             | Identifier "=" Expression ";"
 *             | Identifier "[" Expression "]" "=" Expression ";"
 */
void Statement() : {}
{
  // Alternativa 1: Bloco de comandos
  <LBRACE> ( Statement() )* <RBRACE>

  // Alternativa 2: Comando If-Else
| <IF> <LPAREN> Expression() <RPAREN> Statement() <ELSE> Statement()

  // Alternativa 3: Comando While
| <WHILE> <LPAREN> Expression() <RPAREN> Statement()

  // Alternativa 4: Comando de Impressão
| <PRINTLN> <LPAREN> Expression() <RPAREN> <SEMICOLON>

  // Alternativa 5: Atribuição a um elemento de array
  // LOOKAHEAD necessário porque esta regra e a próxima (atribuição simples)
  // ambas começam com Identifier. Precisamos olhar à frente para ver se
  // um "[" segue o Identifier para escolher esta regra.
| LOOKAHEAD( Identifier() <LBRACKET> ) // Espia: Nome [ ... ?
  Identifier() <LBRACKET> Expression() <RBRACKET> <ASSIGN> Expression() <SEMICOLON> // Nome "[" Expressao "]" "=" Expressao ";"

  // Alternativa 6: Atribuição simples a uma variável
  // LOOKAHEAD adicionado para robustez, embora o lookahead anterior possa
  // implicitamente resolver. Garante que só entramos aqui se for ID = ...
| LOOKAHEAD( Identifier() <ASSIGN> ) // Espia: Nome = ... ?
  Identifier() <ASSIGN> Expression() <SEMICOLON> // Nome "=" Expressao ";"
}


// --- Regras de Expressão (Expression) ---
// Expressões são partes do código que produzem um valor (ex: 1+2, a<b, x, true, obj.metodo()).
// As regras são organizadas em níveis para lidar com a precedência e associatividade
// dos operadores, o que é necessário para um parser LL(1) como o gerado pelo JavaCC.
// A precedência aumenta dos níveis mais baixos (Expression) para os mais altos (PrimaryExpression).

/**
 * Regra: Expression (Nível mais baixo de precedência: &&)
 * BNF (reescrita para LL): Expression ::= CompareExpression ( "&&" CompareExpression )*
 */
void Expression() : {}
{
  CompareExpression() ( <AND> CompareExpression() )* // Uma CompareExpression, seguida por zero ou mais "&& CompareExpression".
}

/**
 * Regra: CompareExpression (Nível de precedência: <)
 * BNF (reescrita para LL): CompareExpression ::= AddExpression ( "<" AddExpression )*
 */
void CompareExpression() : {}
{
  AddExpression() ( <LT> AddExpression() )* // Uma AddExpression, seguida por zero ou mais "< AddExpression".
}

/**
 * Regra: AddExpression (Nível de precedência: + e -)
 * BNF (reescrita para LL): AddExpression ::= MultiplyExpression ( ( "+" | "-" ) MultiplyExpression )*
 */
void AddExpression() : {}
{
  MultiplyExpression() ( ( <PLUS> | <MINUS> ) MultiplyExpression() )* // Uma MultiplyExpression, seguida por zero ou mais ("+" ou "-") MultiplyExpression.
}

/**
 * Regra: MultiplyExpression (Nível de precedência: *)
 * BNF (reescrita para LL): MultiplyExpression ::= UnaryExpression ( "*" UnaryExpression )*
 */
void MultiplyExpression() : {}
{
  UnaryExpression() ( <MULTIPLY> UnaryExpression() )* // Uma UnaryExpression, seguida por zero ou mais "*" UnaryExpression.
}

/**
 * Regra: UnaryExpression (Nível de precedência: ! prefixado)
 * BNF (reescrita para LL): UnaryExpression ::= "!" UnaryExpression | PostfixExpression
 */
void UnaryExpression() : {}
{
  // Alternativa 1: Operador de negação "!" seguido por outra UnaryExpression.
  <NOT> UnaryExpression()
  // Alternativa 2: Uma expressão pós-fixada (nível seguinte).
| PostfixExpression()
}

/**
 * Regra: PostfixExpression
 * Lida com operações que aparecem *depois* de uma expressão primária,
 * como acesso a array `[...]`, acesso a tamanho `.length`, e chamada de método `.identificador(...)`.
 * BNF (reescrita para LL): PostfixExpression ::= PrimaryExpression ( "[" Expression "]" | "." "length" | "." Identifier "(" ( ExpressionList )? ")" )*
 */
void PostfixExpression() : {}
{
  // Começa com uma expressão primária (o nível mais alto de precedência).
  PrimaryExpression()
  // Seguido por zero ou mais (*) operações pós-fixadas:
  (
    // Alternativa 1: Acesso a array.
    <LBRACKET> Expression() <RBRACKET> // "[" Expressao "]"

    // Alternativa 2: Acesso ao tamanho do array.
    // LOOKAHEAD(2) necessário para diferenciar ".length" de ".metodo(...)".
    // Quando o parser vê ".", ele precisa olhar o próximo token para decidir.
  | LOOKAHEAD(2) // Espia dois tokens: "." e "length"?
    <DOT> <LENGTH> // "." "length"

    // Alternativa 3: Chamada de método.
  | <DOT> <IDENTIFIER> <LPAREN> ( ExpressionList() )? <RPAREN> // "." NomeMetodo "(" ListaArgumentosOpcional ")"
  )*
}

/**
 * Regra: PrimaryExpression (Nível mais alto de precedência)
 * Define os "átomos" das expressões, as unidades mais básicas que produzem valor.
 * BNF: PrimaryExpression ::= INTEGER_LITERAL | "true" | "false" | Identifier | "this"
 *                         | "(" Expression ")"
 *                         | "new" "int" "[" Expression "]"
 *                         | "new" Identifier "(" ")"
 */
void PrimaryExpression() : {}
{
  // Alternativa 1: Um número inteiro literal.
  <INTEGER_LITERAL>
  // Alternativa 2: O literal booleano "true".
| <TRUE>
  // Alternativa 3: O literal booleano "false".
| <FALSE>
  // Alternativa 4: Um identificador (nome de variável ou parâmetro).
| <IDENTIFIER>
  // Alternativa 5: A palavra-chave "this" (referência ao objeto atual).
| <THIS>
  // Alternativa 6: Uma expressão entre parênteses (para controlar a ordem de avaliação).
| <LPAREN> Expression() <RPAREN> // "(" Expressao ")"

  // Alternativa 7: Criação de um novo array de inteiros.
  // LOOKAHEAD(2) necessário para diferenciar "new int[...]" de "new Objeto()".
  // Quando o parser vê "new", ele precisa olhar o próximo token ("int" ou Identifier).
| LOOKAHEAD(2) // Espia dois tokens: "new" e "int"?
  <NEW> <INT> <LBRACKET> Expression() <RBRACKET> // "new" "int" "[" Expressao "]"

  // Alternativa 8: Criação de um novo objeto.
| <NEW> <IDENTIFIER> <LPAREN> <RPAREN> // "new" NomeDaClasse "(" ")"
}

/**
 * Regra: ExpressionList
 * Define uma lista de uma ou mais expressões separadas por vírgula,
 * usada como argumentos na chamada de métodos.
 * BNF: ExpressionList ::= Expression ( "," Expression )*
 */
void ExpressionList() : {}
{
  Expression() // Pelo menos uma expressão.
  ( <COMMA> Expression() )* // Seguido por zero ou mais (", " Expressao).
}

/**
 * Regra Auxiliar: Identifier
 * Esta não é uma regra "real" da gramática MiniJava em si, mas uma produção
 * auxiliar usada dentro de algumas chamadas LOOKAHEAD.
 * Ela simplesmente reconhece um token do tipo IDENTIFIER.
 * Ajuda a tornar as condições de lookahead mais precisas e legíveis.
 * Ex: LOOKAHEAD( Identifier() <LBRACKET> ) verifica se os próximos tokens
 * são um IDENTIFIER seguido por um LBRACKET.
 */
void Identifier() : {}
{
  <IDENTIFIER>
}